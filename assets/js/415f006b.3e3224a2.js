"use strict";(self.webpackChunkzero_2_hero=self.webpackChunkzero_2_hero||[]).push([[4449],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=s,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3354:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),s=n(3366),o=(n(7294),n(3905)),a=["components"],i={sidebar_position:1},l="Getting Started with Express",p={unversionedId:"Express/express",id:"Express/express",isDocsHomePage:!1,title:"Getting Started with Express",description:"img.png",source:"@site/docs/Express/express.md",sourceDirName:"Express",slug:"/Express/express",permalink:"/zero2hero/docs/Express/express",editUrl:"https://github.com/sliit-foss/zero2hero/edit/master/docs/Express/express.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Forms with React Hooks",permalink:"/zero2hero/docs/React/Forms-with-React-Hooks"},next:{title:"TailwindCSS",permalink:"/zero2hero/docs/TailwindCSS/Tailwindcss"}},c=[{value:"What we will be covering",id:"what-we-will-be-covering",children:[],level:3},{value:"What is Express?",id:"what-is-express",children:[],level:2},{value:"Installing Express",id:"installing-express",children:[],level:2},{value:"Your very first Express server",id:"your-very-first-express-server",children:[],level:2}],u={toc:c};function d(e){var t=e.components,i=(0,s.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started-with-express"},"Getting Started with Express"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img.png",src:n(6492).Z})),(0,o.kt)("h3",{id:"what-we-will-be-covering"},"What we will be covering"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"What is Express?"),(0,o.kt)("li",{parentName:"ul"},"Installing Express"),(0,o.kt)("li",{parentName:"ul"},"Your very first Express server")),(0,o.kt)("h2",{id:"what-is-express"},"What is Express?"),(0,o.kt)("p",null,"Express.js or commonly known as just Express is a Web Application framework built for\nNodejs. It was released on the 22nd of May 2010 as an open-source software under the MIT\nlicense. As of today, it is one of the most widely used backend frameworks and is part of the\nthree popular JavaScript based technology stacks called MEAN, MERN and MEVN where M\nstands for MongoDB, E stands for Express.js, N stands for Node.js and A, R and V stand for\nAngular, React and Vue.js in their respective orders."),(0,o.kt)("p",null,"You can find the official documentation for Express at the link below,"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://expressjs.com"},"https://expressjs.com")),(0,o.kt)("h2",{id:"installing-express"},"Installing Express"),(0,o.kt)("p",null,"Installing Express, like any other node module, is exceptionally easy but you do need\nNode.js pre-installed on your machine which is available to download at,"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/"},"https://nodejs.org/en/download/")),(0,o.kt)("p",null,"Any version of it is fine, as long as it is above v 0.10.0 which\nis the minimum required to run Express."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img_1.png",src:n(7217).Z})),(0,o.kt)("p",null,"Once node has been successfully installed, we will need to create a new directory from\nwhich we can continue to work on out project. Navigate to a directory of your choosing and\nexecute the following commands in the terminal which will create a new folder called\nexpressApp, or alternatively you could use the standard GUI."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir expressApp\n$ cd expressApp\n")),(0,o.kt)("p",null,"Since our project is ultimately a node.js application, we need a package.json file to hold\nall important metadata related to our project. The following command will initiate a default\npackage.json file in the root directory of your project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm init\n")),(0,o.kt)("p",null,"Once this is done, we are ready to add Express as a dependency to our project. You\ncould either install and add it permanently to your package.json file using, "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install express \u2013save\n")),(0,o.kt)("p",null,"Or install it temporarily without modifying your existing package.json file using,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install express --no-save\n")),(0,o.kt)("p",null,"With this, we are finally ready to build our first Express server."),(0,o.kt)("h2",{id:"your-very-first-express-server"},"Your very first Express server"),(0,o.kt)("p",null,"Creating an Express app is easy as writing 7 lines of code. Hard to believe? Well, you\u2019ll\nsee for yourself. To get started, we first need to create an index.js file in our root directory. The\nname of this file can be changed into anything, but it needs to match what is specified over\nhere in your package.json file which by default, is set to index.js. This marks the entry point to\nour application and even though our app will continue to function without it, it is good practice\nto keep it defined."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img_2.png",src:n(7242).Z})),(0,o.kt)("p",null,"In your newly created index.js file, we initially need to import express which can be\nachieved through the following line of code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express')\n")),(0,o.kt)("p",null,"The variable \u2018express\u2019 seen above, which again can be anything you prefer is a function\nand is the default export of express. We now need to call upon this function and assign the\nexpress application to a variable which we generally do as follows,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const app = express()\n")),(0,o.kt)("p",null,"Next, we need to define a port on which our Express application will run. This can be\nanything between port 0 and 65536 assuming that it is not in use by something else, but as a\nnormal most people prefer to use port 5000 while in development environments. Here we too\nwill be using port 5000."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const port = 5000\n")),(0,o.kt)("p",null,"The next step is to define a route to our application, which is basically a path through\nwhich a client request arrives along with a specific HTTP request method. Our route should\ndefine the course of action to take once such a request arrives. The syntax to achieve this is as\nsimple as follows,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"app.METHOD(PATH, HANDLER)\n")),(0,o.kt)("p",null,"Where:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"app is the variable which we defined earlier"),(0,o.kt)("li",{parentName:"ul"},"METHOD is the HTTP request method which can be any of the following, GET, POST, PUT, or DELETE"),(0,o.kt)("li",{parentName:"ul"},"PATH is the route to our server to access this particular endpoint"),(0,o.kt)("li",{parentName:"ul"},"HANDLER is the callback function to be executed upon the arrival of a request through the above route")),(0,o.kt)("p",null,"In our application, we will define a simple GET method to the root path of our server\nupon which it will send us a simple response saying, \u201cHi there from the express server!\u201d. We\ncan accomplish this as follows,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', (req, res) => res.send('Hi there from the express server!'))\n")),(0,o.kt)("p",null,"The req and res you see above are special objects where req holds information about\nthe incoming HTTP request and res is used to send back the required HTTP response to the\nclient."),(0,o.kt)("p",null,"We are now almost at the end of our goal and all that is left is to tell the server to start\nlistening to incoming connections on the port we previously defined. We can do this by using\nthe app.listen() function of Express which expects a port number as the first argument and a\ncallback function as the second which specifies the action to be performed once the server is up\nand running."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"app.listen(port, () => console.log(`Express app listening at http://localhost:${port}`))\n")),(0,o.kt)("p",null,"Finally, to spin up our brand-new server, we need to execute the following line in our\nterminal from the root directory of our project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ node index.js\n")),(0,o.kt)("p",null,"To see our server in action, open up your browser and navigate to\n",(0,o.kt)("a",{parentName:"p",href:"http://localhost:5000/"},"http://localhost:5000/")," and voila, there you have the response from your very first Express\nserver!"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img_3.png",src:n(7162).Z})),(0,o.kt)("p",null,"That marks the end of our very first Express tutorial. "),(0,o.kt)("p",null,"We hope that you found it helpful..."))}d.isMDXComponent=!0},6492:function(e,t,n){t.Z=n.p+"assets/images/img-1416d13314d05641c62733124b5672b3.png"},7217:function(e,t,n){t.Z=n.p+"assets/images/img_1-f934b4bb7b26ff924418edf9b9717189.png"},7242:function(e,t,n){t.Z=n.p+"assets/images/img_2-99cf7346e975a73605a1925b625e3878.png"},7162:function(e,t,n){t.Z=n.p+"assets/images/img_3-ae3ed6ad970b5a79826cbff8df3eddaa.png"}}]);